# Copyright 2015 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/c++/c++.gni")
import("//build/config/compiler/compiler.gni")
import("//build/config/sanitizers/sanitizers.gni")
import("//build/toolchain/toolchain.gni")
import("//buildtools/third_party/libc++/libcxx_headers.gni")
import("//buildtools/third_party/libc++/modules.gni")

if (is_mac) {
  import("//build/config/mac/mac_sdk.gni")
}

# Used by libc++ and libc++abi.
# See //build/config/c++:runtime_library for the config used by users of libc++.
config("config") {
  cflags = [
    "-fstrict-aliasing",
    "-Wundef",
  ]
  if (is_win) {
    cflags += [
      # libc++ wants to redefine the macros WIN32_LEAN_AND_MEAN and _CRT_RAND_S
      # in its implementation.
      "-Wno-macro-redefined",
    ]

    # We want to use a uniform C++ version across all of chromium, but upstream
    # libc++ requires at least C++20 so we have to make an exception here. No
    # other target should override the default -std= flag.
    if (use_cxx23) {
      cflags_cc = [ "-std:c++23" ]
    } else {
      cflags_cc = [ "-std:c++20" ]
    }
  } else {
    cflags += [ "-fPIC" ]
    if (use_cxx23) {
      cflags_cc = [ "-std=c++23" ]
    } else {
      cflags_cc = [ "-std=c++20" ]
    }
  }

  defines = [ "_LIBCPP_BUILDING_LIBRARY" ]
}

# Explicitly set version macros to Windows 7 to prevent libc++ from adding a
# hard dependency on GetSystemTimePreciseAsFileTime, which was introduced in
# Windows 8.
config("winver") {
  defines = [
    "NTDDI_VERSION=NTDDI_WIN7",
    "_WIN32_WINNT=_WIN32_WINNT_WIN7",
    "WINVER=_WIN32_WINNT_WIN7",
  ]
}

if (use_clang_modules) {
  if (is_linux || is_chromeos) {
    textual_module("sysroot_ctype") {
    }
    textual_module("sysroot_errno") {
      public_deps = [ ":sysroot" ]
    }
    textual_module("sysroot_fenv") {
    }
    alias("sysroot_features") {
      actual = [ ":sysroot_limits" ]
    }
    textual_module("sysroot_inttypes") {
      public_deps = [
        ":_Builtin_stdint",
        ":sysroot_features",
      ]
    }
    sysroot_module("sysroot_limits") {
    }

    alias("sysroot_locale") {
      actual = []
    }

    textual_module("sysroot_math") {
      public_deps = [ ":sysroot_stdlib" ]
    }

    alias("sysroot_pthread") {
      actual = [ ":sysroot" ]
    }

    textual_module("sysroot_stdatomic") {
    }
    textual_module("sysroot_stdint") {
      public_deps = [ ":sysroot_features" ]
    }
    alias("sysroot_stdlib") {
      actual = [ ":sysroot" ]
    }
    textual_module("sysroot_string") {
      public_deps = [
        ":_Builtin_stddef",
        ":sysroot",
      ]
    }
    textual_module("sysroot_uchar") {
      public_deps = [ ":_Builtin_stddef" ]
    }
    alias("sysroot_wchar") {
      actual = [ ":sysroot" ]
    }
    textual_module("sysroot_wctype") {
    }

    sysroot_module("sysroot") {
      public_deps = [
        ":_Builtin_limits",
        ":_Builtin_stdarg",
        ":_Builtin_stddef",
      ]
    }

    alias("all_sysroot") {
      actual = [
        ":sysroot_limits",
        ":sysroot",
      ]
    }
  } else if (is_android) {
    textual_module("sysroot_ctype") {
      public_deps = [ ":sysroot" ]
    }

    textual_module("sysroot_errno") {
      public_deps = [ ":sysroot" ]
    }

    sysroot_module("sysroot_features") {
    }

    textual_module("sysroot_fenv") {
      public_deps = [ ":sysroot" ]
    }

    textual_module("sysroot_inttypes") {
      public_deps = [
        ":_Builtin_stdint",
        ":sysroot_features",
      ]
    }

    textual_module("sysroot_limits") {
      public_deps = [ ":sysroot_features" ]
    }

    alias("sysroot_locale") {
      actual = []
    }

    textual_module("sysroot_math") {
      public_deps = [ ":sysroot_stdlib" ]
    }

    alias("sysroot_pthread") {
      actual = [ ":sysroot" ]
    }

    textual_module("sysroot_stdatomic") {
      # stdatomic includes libc++'s <atomic>
      public_deps = [ ":std" ]
    }

    textual_module("sysroot_stdint") {
      public_deps = [
        ":_Builtin_stddef",
        ":sysroot_features",
      ]
    }

    alias("sysroot_stdlib") {
      actual = [ ":sysroot" ]
    }

    textual_module("sysroot_string") {
      public_deps = [
        ":_Builtin_stddef",
        ":sysroot",
      ]
    }

    textual_module("sysroot_uchar") {
      public_deps = [
        ":_Builtin_stddef",
        ":sysroot",
      ]
    }

    textual_module("sysroot_wctype") {
      public_deps = [ ":sysroot" ]
    }

    alias("sysroot_wchar") {
      actual = [ ":sysroot" ]
    }

    config("wchar_fix") {
      # See https://github.com/llvm/llvm-project/blob/3f33e7ba5b08a97939280e539ad20a34d54b2719/libcxx/include/wchar.h#L139
      # Since android doesn't come with glibc, this isn't defined, and thus
      # wchar.h defines (not declares) additional overloads when this is unset,
      # and wchar.h is textual, we set this to ensure ODR is not violated.
      defines = [ "_LIBCPP_WCHAR_H_HAS_CONST_OVERLOADS" ]
    }

    sysroot_module("sysroot") {
      public_deps = [
        ":_Builtin_limits",
        ":_Builtin_stdarg",
        ":_Builtin_stddef",
        ":_Builtin_stdint",
      ]
      public_configs = [ ":wchar_fix" ]
    }

    alias("all_sysroot") {
      actual = [
        ":sysroot_features",
        ":sysroot",
      ]
    }
  } else if (is_apple) {
    if (default_toolchain == current_toolchain && is_ios) {
      # sysroot_modulemaps can be inside the build directory. This no-op action
      # declares the modulemap files as outputs to satisfy GN's dependency
      # tracking when other targets use them as inputs.
      action("copy_sysroot_modulemaps") {
        script = "//build/noop.py"
        outputs = sysroot_modulemaps
      }
    }

    DarwinBasic_module("MachO") {
      public_deps = [
        ":_Builtin_stdbool",
        ":_Builtin_stdint",
        ":_limits",
        ":_string",
        ":mach",
        ":std_string_h",
        ":unistd",
        ":uuid",
      ]
    }

    DarwinBasic_module("_strings") {
      public_deps = [ ":DarwinFoundation" ]
    }

    DarwinBasic_module("alloca") {
      public_deps = [ ":DarwinFoundation" ]
    }

    DarwinBasic_module("gethostuuid") {
      public_deps = [
        ":_time",
        ":uuid",
      ]
    }

    DarwinBasic_module("nl_types") {
      public_deps = [
        ":DarwinFoundation",
        ":sys_types",
      ]
    }

    DarwinBasic_module("pthread") {
      public_deps = [
        ":DarwinFoundation",
        ":_signal",
        ":_time",
        ":mach",
      ]
    }

    DarwinBasic_module("runetype") {
      public_deps = [ ":DarwinFoundation" ]
    }

    DarwinBasic_module("sys_select") {
      public_deps = [
        ":DarwinFoundation",
        ":_signal",
        ":_sys_select",
        ":_time",
        ":sys_time",
      ]
    }

    DarwinBasic_module("sys_types") {
      public_deps = [
        ":DarwinFoundation",
        ":_errno",
        ":_sys_select",
        ":_useconds_t",
        ":netinet_in",
      ]
    }

    DarwinBasic_module("sys_wait") {
      public_deps = [
        ":DarwinFoundation",
        ":_signal",
        ":sys_resource",
        ":sys_types",
      ]
    }

    DarwinBasic_module("sys_resource") {
      public_deps = [
        ":DarwinFoundation",
        ":_Builtin_stdint",
        ":sys_time",
        ":sys_types",
      ]
    }

    DarwinBasic_module("unistd") {
      public_deps = [
        ":DarwinFoundation",
        ":_limits",
        ":_stdio",
        ":gethostuuid",
        ":sys_select",
        ":uuid",
      ]
    }

    DarwinBasic_module("xlocale") {
      public_deps = [
        ":DarwinFoundation",
        ":_locale",
      ]
    }

    DarwinFoundation_module("DarwinFoundation") {
      public_deps = [
        ":_Builtin_stdarg",
        ":_Builtin_stddef",
      ]
    }

    DarwinFoundation_module("_sys_select") {
      public_deps = [ ":DarwinFoundation" ]
    }

    DarwinFoundation_module("_useconds_t") {
      public_deps = [ ":DarwinFoundation" ]
    }

    DarwinFoundation_module("mach") {
      public_deps = [ ":DarwinFoundation" ]
    }

    DarwinFoundation_module("netinet_in") {
      public_deps = [ ":DarwinFoundation" ]
    }

    DarwinFoundation_module("sys_time") {
      public_deps = [ ":DarwinFoundation" ]
    }

    DarwinFoundation_module("uuid") {
      public_deps = [ ":DarwinFoundation" ]
    }

    c_standard_library_module("__wctype") {
      public_deps = [
        ":_ctype",
        ":std_ctype_h",
      ]
    }

    c_standard_library_module("_assert") {
      public_deps = [ ":DarwinFoundation" ]
    }

    c_standard_library_module("_ctype") {
      public_deps = [
        ":DarwinFoundation",
        ":runetype",
      ]
    }

    c_standard_library_module("_errno") {
      public_deps = [ ":DarwinFoundation" ]
    }

    c_standard_library_module("_fenv") {
    }

    c_standard_library_module("_inttypes") {
      public_deps = [
        ":_Builtin_stdint",
        ":_stdint",
      ]
    }

    c_standard_library_module("_limits") {
      public_deps = [ ":DarwinFoundation" ]
    }

    c_standard_library_module("_locale") {
      public_deps = [ ":DarwinFoundation" ]
    }

    c_standard_library_module("_math") {
      public_deps = [ ":DarwinFoundation" ]
    }

    c_standard_library_module("_setjmp") {
      public_deps = [ ":DarwinFoundation" ]
    }

    c_standard_library_module("_signal") {
      public_deps = [
        ":DarwinFoundation",
        ":mach",
        ":sys_types",
      ]
    }

    c_standard_library_module("_stdint") {
      public_deps = [ ":DarwinFoundation" ]
    }

    c_standard_library_module("_stdio") {
      public_deps = [
        ":DarwinFoundation",
        ":sys_types",
      ]
    }

    c_standard_library_module("_stdlib") {
      public_deps = [
        ":_signal",
        ":_stdint",
        ":alloca",
        ":runetype",
        ":sys_wait",
      ]
    }

    c_standard_library_module("_string") {
      public_deps = [
        ":DarwinFoundation",
        ":_strings",
        ":sys_types",
      ]
    }

    c_standard_library_module("_time") {
      public_deps = [
        ":DarwinFoundation",
        ":sys_types",
      ]
    }

    c_standard_library_module("_wchar") {
      public_deps = [
        ":__wctype",
        ":_stdio",
        ":_time",
      ]
    }

    c_standard_library_module("_wctype") {
      public_deps = [ ":__wctype" ]
    }

    alias("all_sysroot") {
      actual = [
        ":DarwinFoundation",
        ":MachO",
        ":__wctype",
        ":_assert",
        ":_ctype",
        ":_errno",
        ":_fenv",
        ":_inttypes",
        ":_limits",
        ":_locale",
        ":_setjmp",
        ":_signal",
        ":_stdint",
        ":_stdio",
        ":_stdlib",
        ":_string",
        ":_strings",
        ":_sys_select",
        ":_time",
        ":_useconds_t",
        ":_wchar",
        ":_wctype",
        ":alloca",
        ":gethostuuid",
        ":mach",
        ":netinet_in",
        ":nl_types",
        ":pthread",
        ":runetype",
        ":sys_resource",
        ":sys_time",
        ":sys_types",
        ":sys_wait",
        ":unistd",
        ":uuid",
        ":xlocale",
      ]
    }

    alias("sysroot_ctype") {
      actual = [ ":_ctype" ]
    }
    alias("sysroot_errno") {
      actual = [ ":_errno" ]
    }
    alias("sysroot_fenv") {
      actual = [ ":_fenv" ]
    }
    alias("sysroot_inttypes") {
      actual = [ ":_inttypes" ]
    }
    alias("sysroot_limits") {
      actual = [ ":_limits" ]
    }
    alias("sysroot_locale") {
      actual = [ ":_locale" ]
    }
    alias("sysroot_math") {
      actual = [ ":_math" ]
    }
    alias("sysroot_pthread") {
      actual = [ ":pthread" ]
    }
    alias("sysroot_stdatomic") {
      actual = []
    }
    alias("sysroot_stdint") {
      actual = [ ":_stdint" ]
    }
    alias("sysroot_stdlib") {
      actual = [ ":_stdlib" ]
    }
    alias("sysroot_string") {
      actual = [ ":_string" ]
    }
    alias("sysroot_uchar") {
      actual = []
    }
    alias("sysroot_wchar") {
      actual = [ ":_wchar" ]
    }
    alias("sysroot_wctype") {
      actual = [ ":_wctype" ]
    }
  }

  builtin_module("_Builtin_float") {
  }

  builtin_module("_Builtin_intrinsics") {
    public_deps = [
      ":std_core",
      ":sysroot_stdlib",
    ]
    if (current_cpu == "arm" || current_cpu == "arm64") {
      # <arm_acle.h> includes <stdint.h> which requires _Builtin_stdint module.
      public_deps += [ ":_Builtin_stdint" ]
    }
  }

  builtin_module("_Builtin_inttypes") {
    public_deps = [ ":sysroot_inttypes" ]
  }

  builtin_module("_Builtin_limits") {
    public_deps = [
      ":std_float_h",
      ":sysroot_limits",
    ]
  }

  builtin_module("_Builtin_stdalign") {
  }

  builtin_module("_Builtin_stdarg") {
  }

  builtin_module("_Builtin_stdatomic") {
    public_deps = [
      ":_Builtin_stddef",
      ":_Builtin_stdint",
      ":sysroot_stdatomic",
    ]
  }

  builtin_module("_Builtin_stdbool") {
  }

  builtin_module("_Builtin_stddef") {
  }

  builtin_module("_Builtin_stdint") {
    public_deps = [ ":sysroot_stdint" ]
  }

  builtin_module("_Builtin_unwind") {
    public_deps = [ ":_Builtin_stdint" ]
  }

  builtin_module("ptrauth") {
  }

  alias("all_builtins") {
    actual = [
      "//buildtools/third_party/libc++:_Builtin_float",
      "//buildtools/third_party/libc++:_Builtin_intrinsics",
      "//buildtools/third_party/libc++:_Builtin_inttypes",
      "//buildtools/third_party/libc++:_Builtin_limits",
      "//buildtools/third_party/libc++:_Builtin_stdalign",
      "//buildtools/third_party/libc++:_Builtin_stdarg",
      "//buildtools/third_party/libc++:_Builtin_stdatomic",
      "//buildtools/third_party/libc++:_Builtin_stdbool",
      "//buildtools/third_party/libc++:_Builtin_stddef",
      "//buildtools/third_party/libc++:_Builtin_stdint",
      "//buildtools/third_party/libc++:_Builtin_unwind",
      "//buildtools/third_party/libc++:ptrauth",
    ]
  }

  # We need to have libc++ headers, __assertion_handler and __config_site in the
  # same directory for clang modules build.
  copy("copy_libcxx_headers") {
    sources = libcxx_headers
    outputs = [ "{{source_gen_dir}}/{{source_file_part}}" ]
  }

  copy("copy_custom_headers") {
    sources = [
      "__assertion_handler",
      "__config_site",
    ]
    outputs = [
      "${root_gen_dir}/third_party/libc++/src/include/{{source_file_part}}",
    ]
  }

  libcxx_module("std") {
    public_deps = [
      ":_Builtin_limits",
      ":_Builtin_stdalign",
      ":std_core",
      ":std_ctype_h",
      ":std_errno_h",
      ":std_fenv_h",
      ":std_float_h",
      ":std_inttypes_h",
      ":std_math_h",
      ":std_private_mbstate_t",
      ":std_string_h",
      ":std_uchar_h",
      ":std_wctype_h",
      ":sysroot_locale",
      ":sysroot_pthread",
    ]
    if (is_apple) {
      public_deps += [
        # <locale> includes <nl_types.h> inside an __APPLE__ macro guard which
        # requires nl_types module.
        ":nl_types",

        # __locale_dir/support/apple.h includes __locale_dir/support/bsd_like.h,
        #  which includes xlocale.h.
        ":xlocale",
      ]
    }
  }

  textual_module("std_config") {
    # Snippet from __configuration/platform.h:
    # #if defined(__linux__) || defined(__AMDGPU__) || defined(__NVPTX__)
    #  if __has_include(<features.h>)
    #    include <features.h>
    if (is_linux || is_chromeos || is_android) {
      public_deps = [ ":sysroot_features" ]
    }
  }

  libcxx_module("std_core") {
    public_deps = [
      ":_Builtin_stddef",
      ":_Builtin_stdint",
      ":std_config",
    ]
  }

  libcxx_module("std_ctype_h") {
    public_deps = [
      ":std_config",
      ":sysroot_ctype",
    ]
  }

  libcxx_module("std_errno_h") {
    public_deps = [
      ":std_config",
      ":sysroot_errno",
    ]
  }

  libcxx_module("std_fenv_h") {
    public_deps = [
      ":std_config",
      ":sysroot_fenv",
    ]
  }

  libcxx_module("std_float_h") {
    public_deps = [
      ":_Builtin_float",
      ":std_config",
    ]
  }

  libcxx_module("std_inttypes_h") {
    public_deps = [
      ":_Builtin_inttypes",
      ":std_config",
    ]
  }

  libcxx_module("std_math_h") {
    public_deps = [
      ":std_core",
      ":sysroot_math",
      ":sysroot_stdlib",
    ]
  }

  libcxx_module("std_private_mbstate_t") {
    public_deps = [
      ":std_config",
      ":sysroot_wchar",
    ]
  }

  libcxx_module("std_stdatomic_h") {
    public_deps = [
      ":_Builtin_stdatomic",
      ":std_config",
      ":sysroot_stdint",
    ]
  }

  libcxx_module("std_string_h") {
    public_deps = [
      ":std_config",
      ":sysroot_string",
    ]
  }

  libcxx_module("std_uchar_h") {
    public_deps = [
      ":std_private_mbstate_t",
      ":sysroot_uchar",
    ]
  }

  libcxx_module("std_wctype_h") {
    public_deps = [
      ":std_config",
      ":sysroot_wctype",
    ]
  }

  alias("all_std") {
    # There are more modules than this, but since the others are purely
    # textual, they don't need to be compiled to a pcm.
    actual = [
      ":std",
      ":std_core",
      ":std_ctype_h",
      ":std_errno_h",
      ":std_fenv_h",
      ":std_float_h",
      ":std_inttypes_h",
      ":std_math_h",
      ":std_private_mbstate_t",
      ":std_stdatomic_h",
      ":std_string_h",
      ":std_uchar_h",
      ":std_wctype_h",
    ]
  }

  alias("all_modules") {
    actual = [
      ":all_builtins",
      ":all_std",
      ":all_sysroot",
    ]
  }
}

target(libcxx_target_type, "libc++") {
  # Most things that need to depend on libc++ should do so via the implicit
  # 'common_deps' dependency below.  Some targets that package libc++.so may
  # need to explicitly depend on libc++.
  visibility = [
    "//build/config:common_deps",
    "//third_party/catapult/devil",
  ]
  if (is_linux) {
    # This target packages libc++.so, so must have an explicit dependency on
    # libc++.
    visibility +=
        [ "//remoting/host/linux:remoting_me2me_host_copy_user_session" ]
  }
  if (build_with_chromium && is_win && is_component_build) {
    # PartitionAlloc uses no_default_deps=true when is_win && is_component_build
    # but it depends on libc++. So need to add an explicit dependency on
    # libc++.
    visibility +=
        [ "//base/allocator/partition_allocator/src/partition_alloc:*" ]
  }
  if (libcxx_is_shared) {
    no_default_deps = true
  }

  if (is_linux && !is_clang) {
    libs = [ "atomic" ]
  }

  inputs = [
    "__assertion_handler",
    "__config_site",
  ]

  # TODO(crbug.com/40273848): Move this build file to third_party/libc++/BUILD.gn
  # once submodule migration is done.
  sources = [
    "//third_party/libc++/src/src/algorithm.cpp",
    "//third_party/libc++/src/src/any.cpp",
    "//third_party/libc++/src/src/atomic.cpp",
    "//third_party/libc++/src/src/barrier.cpp",
    "//third_party/libc++/src/src/bind.cpp",
    "//third_party/libc++/src/src/call_once.cpp",
    "//third_party/libc++/src/src/charconv.cpp",
    "//third_party/libc++/src/src/chrono.cpp",
    "//third_party/libc++/src/src/condition_variable.cpp",
    "//third_party/libc++/src/src/condition_variable_destructor.cpp",
    "//third_party/libc++/src/src/error_category.cpp",
    "//third_party/libc++/src/src/exception.cpp",
    "//third_party/libc++/src/src/filesystem/directory_iterator.cpp",
    "//third_party/libc++/src/src/filesystem/filesystem_error.cpp",
    "//third_party/libc++/src/src/filesystem/operations.cpp",
    "//third_party/libc++/src/src/filesystem/path.cpp",
    "//third_party/libc++/src/src/functional.cpp",
    "//third_party/libc++/src/src/future.cpp",
    "//third_party/libc++/src/src/hash.cpp",
    "//third_party/libc++/src/src/ios.cpp",
    "//third_party/libc++/src/src/ios.instantiations.cpp",
    "//third_party/libc++/src/src/iostream.cpp",
    "//third_party/libc++/src/src/locale.cpp",
    "//third_party/libc++/src/src/memory.cpp",
    "//third_party/libc++/src/src/mutex.cpp",
    "//third_party/libc++/src/src/mutex_destructor.cpp",
    "//third_party/libc++/src/src/new_handler.cpp",
    "//third_party/libc++/src/src/new_helpers.cpp",
    "//third_party/libc++/src/src/optional.cpp",
    "//third_party/libc++/src/src/random.cpp",
    "//third_party/libc++/src/src/random_shuffle.cpp",
    "//third_party/libc++/src/src/regex.cpp",
    "//third_party/libc++/src/src/ryu/d2fixed.cpp",
    "//third_party/libc++/src/src/ryu/d2s.cpp",
    "//third_party/libc++/src/src/ryu/f2s.cpp",
    "//third_party/libc++/src/src/shared_mutex.cpp",
    "//third_party/libc++/src/src/stdexcept.cpp",
    "//third_party/libc++/src/src/string.cpp",
    "//third_party/libc++/src/src/strstream.cpp",
    "//third_party/libc++/src/src/system_error.cpp",
    "//third_party/libc++/src/src/thread.cpp",
    "//third_party/libc++/src/src/typeinfo.cpp",
    "//third_party/libc++/src/src/valarray.cpp",
    "//third_party/libc++/src/src/variant.cpp",
    "//third_party/libc++/src/src/vector.cpp",
    "//third_party/libc++/src/src/verbose_abort.cpp",
  ]

  if (is_apple || (!is_asan && !is_tsan && !is_msan)) {
    # In {a,t,m}san configurations, operator new and operator delete will be
    # provided by the sanitizer runtime library.  Since libc++ defines these
    # symbols with weak linkage, and the *san runtime uses strong linkage, it
    # should technically be OK to include this file, but it's removed to be
    # explicit.
    sources += [ "//third_party/libc++/src/src/new.cpp" ]
  }

  if (is_linux) {
    # These sources are necessary for the Centipede fuzzer,
    # which currently only needs to run on Linux.
    sources += [
      "//third_party/libc++/src/src/filesystem/directory_entry.cpp",
      "//third_party/libc++/src/src/filesystem/filesystem_clock.cpp",
    ]
  }

  include_dirs = [ "//third_party/libc++/src/src" ]
  if (is_win) {
    sources += [
      "//third_party/libc++/src/src/support/win32/locale_win32.cpp",
      "//third_party/libc++/src/src/support/win32/support.cpp",
      "//third_party/libc++/src/src/support/win32/thread_win32.cpp",
    ]
    configs -= [ "//build/config/win:winver" ]
    configs += [ ":winver" ]
    if (libcxx_natvis_include) {
      inputs += [
        # libc++.natvis listed as an input here instead of in
        # //build/config/c++:runtime_library to prevent unnecessary size
        # increase in generated build files.
        "//build/config/c++/libc++.natvis",
      ]
    }
  }

  # Enable exceptions and rtti for libc++, but disable them in modules targets
  # so that modules can be used for other chromium targets which don't enable
  # exception and rtti.
  configs -= configs_to_remove + [
             ]
  configs += configs_to_add + [
             ]

  deps = [ "//third_party/llvm-libc:llvm-libc-shared" ]

  if (use_clang_modules) {
    # TODO(https://github.com/llvm/llvm-project/issues/127012): We don't enable
    # Clang modules for libc++ as libc++'s iostream.cpp has ODR issue
    # (https://crbug.com/40440396#comment81). Also we don't take care about the
    # libc++'s build performance much.
    # (https://crrev.com/c/6248376/4#message-0ddf8e6a0f3ce1eb1654f7025280d8ed75cf2e81)
    # This removes deps to libc++'s modules from libc++'s build as libc++
    # doesn't support modules build itself.
    use_libcxx_modules = false

    deps += [
      ":copy_custom_headers",
      ":copy_libcxx_headers",
    ]
  }
  if ((is_android || is_apple) && libcxx_is_shared) {
    # Use libc++_chrome to avoid conflicting with system libc++
    output_name = "libc++_chrome"
    if (is_android) {
      # See crbug.com/1076244#c11 for more detail.
      configs -= [ "//build/config/android:hide_all_but_jni_onload" ]
    }
  }

  if (libcxx_is_shared && !is_win) {
    configs -= [ "//build/config/gcc:symbol_visibility_hidden" ]
    configs += [ "//build/config/gcc:symbol_visibility_default" ]
  }

  defines = []
  cflags = []

  if (!libcxx_is_shared && !is_win) {
    if (is_apple && is_clang) {
      # We want operator new/delete to be private on Mac, but these functions
      # are implicitly created by the compiler for each translation unit, as
      # specified in the C++ spec 3.7.4p2, which makes them always have default
      # visibility.  This option is needed to force hidden visibility since
      # -fvisibility=hidden doesn't have the desired effect.
      cflags += [ "-fvisibility-global-new-delete=force-hidden" ]
    } else {
      # This resets the visibility to default only for the various
      # flavors of operator new and operator delete.  These symbols
      # are weak and get overriden by Chromium-provided ones, but if
      # these symbols had hidden visibility, this would make the
      # Chromium symbols hidden too because elf visibility rules
      # require that linkers use the least visible form when merging.
      # We want operator new to be public, so that our allocator is
      # able to intercept allocations from other shared libraries.
      # TODO(lld): Ask lld for a --force-public-visibility flag or
      # similar to that overrides the default elf merging rules, and
      # make the allocator's gn config pass that to all its dependencies,
      # then remove this override here.
      defines += [ "_LIBCPP_OVERRIDABLE_FUNC_VIS=__attribute__((__visibility__(\"default\")))" ]
    }
  }

  if (!is_win) {
    defines += [ "LIBCXX_BUILDING_LIBCXXABI" ]
    if (!export_libcxxabi_from_executables) {
      deps += [ "//buildtools/third_party/libc++abi" ]
    }
  }

  # Disabling -Wexit-time-destructors, as libc++ uses `static string` objects
  # for locale code.
  configs += [ "//build/config/compiler:no_exit_time_destructors" ]
}
