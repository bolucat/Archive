Index: u-boot-2017.09/drivers/adc/adc-uclass.c
===================================================================
--- u-boot-2017.09.orig/drivers/adc/adc-uclass.c
+++ u-boot-2017.09/drivers/adc/adc-uclass.c
@@ -7,6 +7,7 @@
 
 #include <common.h>
 #include <errno.h>
+#include <div64.h>
 #include <dm.h>
 #include <dm/lists.h>
 #include <dm/device-internal.h>
@@ -365,6 +366,30 @@ nodev:
 
 	return 0;
 }
+
+int adc_raw_to_uV(struct udevice *dev, unsigned int raw, int *uV)
+{
+	unsigned int data_mask;
+	int ret, val, vref;
+	u64 raw64 = raw;
+
+	ret = adc_vdd_value(dev, &vref);
+	if (ret)
+		return ret;
+
+	if (!adc_vss_value(dev, &val))
+		vref -= val;
+
+	ret = adc_data_mask(dev, &data_mask);
+	if (ret)
+		return ret;
+
+	raw64 *= vref;
+	do_div(raw64, data_mask);
+	*uV = raw64;
+
+	return 0;
+}
 
 static int adc_vdd_platdata_set(struct udevice *dev)
 {
Index: u-boot-2017.09/include/adc.h
===================================================================
--- u-boot-2017.09.orig/include/adc.h
+++ u-boot-2017.09/include/adc.h
@@ -297,4 +297,14 @@ int adc_vss_value(struct udevice *dev, i
  */
 int adc_stop(struct udevice *dev);
 
+/**
+ * adc_raw_to_uV() - converts raw value to microvolts for given ADC device.
+ *
+ * @dev:     ADC device used from conversion
+ * @raw:     raw value to convert
+ * @uV:	     converted value in microvolts
+ * @return:  0 on success or -ve on error
+ */
+int adc_raw_to_uV(struct udevice *dev, unsigned int raw, int *uV);
+
 #endif
