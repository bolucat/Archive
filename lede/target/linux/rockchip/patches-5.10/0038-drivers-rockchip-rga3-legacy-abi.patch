From bf498cb2e34aa3136bfa088b9f4865f97e73fa8c Mon Sep 17 00:00:00 2001
From: jjm2473 <1129525450@qq.com>
Date: Wed, 10 May 2023 20:12:03 +0800
Subject: [PATCH 38/42] drivers/rockchip/rga3: legacy abi

current using user library only supports legacy ABI
---
 drivers/video/rockchip/rga3/Kconfig       |   6 +
 drivers/video/rockchip/rga3/include/rga.h | 127 ++++++++++++++++++++++
 drivers/video/rockchip/rga3/rga_job.c     |  35 +++++-
 3 files changed, 166 insertions(+), 2 deletions(-)

--- a/drivers/video/rockchip/rga3/Kconfig
+++ b/drivers/video/rockchip/rga3/Kconfig
@@ -14,6 +14,12 @@ config ROCKCHIP_RGA_ASYNC
 	help
 	  Asynchronous calls will be supported.
 
+config ROCKCHIP_MULTI_RGA_LEGACY_ABI
+	bool "Legacy ABI"
+	default y
+	help
+	  Legacy ABI for current linux-rga user library.
+
 config ROCKCHIP_RGA_PROC_FS
 	bool "Enable RGA procfs"
 	select ROCKCHIP_RGA_DEBUGGER
--- a/drivers/video/rockchip/rga3/include/rga.h
+++ b/drivers/video/rockchip/rga3/include/rga.h
@@ -866,6 +866,133 @@ struct rga_user_request {
 	uint8_t reservr[120];
 };
 
+#ifdef CONFIG_ROCKCHIP_MULTI_RGA_LEGACY_ABI
+struct rga_img_info_legacy {
+	/* yrgb	mem addr */
+	uint64_t yrgb_addr;
+	/* cb/cr mem addr */
+	uint64_t uv_addr;
+	/* cr mem addr */
+	uint64_t v_addr;
+	/* definition by RK_FORMAT */
+	uint32_t format;
+
+	uint16_t act_w;
+	uint16_t act_h;
+	uint16_t x_offset;
+	uint16_t y_offset;
+
+	uint16_t vir_w;
+	uint16_t vir_h;
+
+	uint16_t endian_mode;
+	/* useless */
+	uint16_t alpha_swap;
+};
+
+/* legacy rga2 struct (RK3568) */
+struct rga_req_legacy {
+    uint8_t render_mode;            /* (enum) process mode sel */
+
+    struct rga_img_info_legacy src;             /* src image info */
+    struct rga_img_info_legacy dst;             /* dst image info */
+    struct rga_img_info_legacy pat;             /* patten image info */
+
+	/* rop4 mask addr */
+	uint64_t rop_mask_addr;
+	/* LUT addr */
+	uint64_t LUT_addr;
+
+	/* dst clip window default value is dst_vir */
+	/* value from [0, w-1] / [0, h-1]*/
+	struct rga_rect_t clip;
+
+	/* dst angle default value 0 16.16 scan from table */
+	int32_t sina;
+	/* dst angle default value 0 16.16 scan from table */
+	int32_t cosa;
+
+	/* alpha rop process flag		 */
+	/* ([0] = 1 alpha_rop_enable)	 */
+	/* ([1] = 1 rop enable)			 */
+	/* ([2] = 1 fading_enable)		 */
+	/* ([3] = 1 PD_enable)			 */
+	/* ([4] = 1 alpha cal_mode_sel)	 */
+	/* ([5] = 1 dither_enable)		 */
+	/* ([6] = 1 gradient fill mode sel) */
+	/* ([7] = 1 AA_enable)			 */
+	uint16_t alpha_rop_flag;
+
+	/* 0 nearst / 1 bilnear / 2 bicubic */
+	uint8_t scale_mode;
+
+	/* color key max */
+	uint32_t color_key_max;
+	/* color key min */
+	uint32_t color_key_min;
+
+	/* foreground color */
+	uint32_t fg_color;
+	/* background color */
+	uint32_t bg_color;
+
+	/* color fill use gradient */
+	struct rga_color_fill_t gr_color;
+
+	struct rga_line_draw_t line_draw_info;
+
+	struct rga_fading_t fading;
+
+	/* porter duff alpha mode sel */
+	uint8_t PD_mode;
+
+	/* global alpha value */
+	uint8_t alpha_global_value;
+
+	/* rop2/3/4 code scan from rop code table*/
+	uint16_t rop_code;
+
+	/* [2] 0 blur 1 sharp / [1:0] filter_type*/
+	uint8_t bsfilter_flag;
+
+	/* (enum) color palette 0/1bpp, 1/2bpp 2/4bpp 3/8bpp*/
+	uint8_t palette_mode;
+
+	/* (enum) BT.601 MPEG / BT.601 JPEG / BT.709 */
+	uint8_t yuv2rgb_mode;
+
+	/* 0/big endian 1/little endian*/
+	uint8_t endian_mode;
+
+	/* (enum) rotate mode */
+	/* 0x0,	 no rotate */
+	/* 0x1,	 rotate	 */
+	/* 0x2,	 x_mirror */
+	/* 0x3,	 y_mirror */
+	uint8_t rotate_mode;
+
+	/* 0 solid color / 1 pattern color */
+	uint8_t color_fill_mode;
+
+	/* mmu information */
+	struct rga_mmu_t mmu_info;
+
+	/* ([0~1] alpha mode)			*/
+	/* ([2~3] rop mode)			*/
+	/* ([4] zero mode en)		 */
+	/* ([5] dst alpha mode)	 */
+	/* ([6] alpha output mode sel) 0 src / 1 dst*/
+	uint8_t alpha_rop_mode;
+
+	uint8_t src_trans_mode;
+
+	uint8_t dither_mode;
+
+	/* full color space convert */
+	struct rga_full_csc full_csc;
+};
+#endif
+
 int rga_mpi_commit(struct rga_mpi_job_t *mpi_job);
 
 #endif /*_RGA_DRIVER_H_*/
--- a/drivers/video/rockchip/rga3/rga_job.c
+++ b/drivers/video/rockchip/rga3/rga_job.c
@@ -920,6 +920,11 @@ struct rga_request *rga_request_config(s
 	struct rga_request *request;
 	struct rga_req *task_list;
 
+#ifdef CONFIG_ROCKCHIP_MULTI_RGA_LEGACY_ABI
+	int i;
+	struct rga_req_legacy *old_task_list;
+#endif
+
 	request_manager = rga_drvdata->pend_request_manager;
 	if (request_manager == NULL) {
 		pr_err("rga_pending_request_manager is null!\n");
@@ -944,13 +949,36 @@ struct rga_request *rga_request_config(s
 		ret = -ENOMEM;
 		goto err_put_request;
 	}
-
+#ifdef CONFIG_ROCKCHIP_MULTI_RGA_LEGACY_ABI
+	old_task_list = kmalloc_array(user_request->task_num, sizeof(struct rga_req_legacy), GFP_KERNEL);
+	if (old_task_list == NULL) {
+		pr_err("old_task_list list alloc error!\n");
+		ret = -ENOMEM;
+		goto err_free_task_list;
+	}
+	if (unlikely(copy_from_user(old_task_list, u64_to_user_ptr(user_request->task_ptr),
+				    sizeof(struct rga_req_legacy) * user_request->task_num))) {
+		pr_err("rga_user_request legacy task list copy_from_user failed\n");
+		ret = -EFAULT;
+		goto err_free_old_task_list;
+	}
+	for (i = 0; i < user_request->task_num; ++i) {
+		task_list[i].render_mode = old_task_list[i].render_mode;
+		memcpy(&task_list[i].src, &old_task_list[i].src, sizeof(struct rga_img_info_legacy));
+		memcpy(&task_list[i].dst, &old_task_list[i].dst, sizeof(struct rga_img_info_legacy));
+		memcpy(&task_list[i].pat, &old_task_list[i].pat, sizeof(struct rga_img_info_legacy));
+		memcpy(&task_list[i].rop_mask_addr, &old_task_list[i].rop_mask_addr, 
+			sizeof(struct rga_req_legacy) - offsetof(struct rga_req_legacy, rop_mask_addr));
+	}
+	kfree(old_task_list);
+#else
 	if (unlikely(copy_from_user(task_list, u64_to_user_ptr(user_request->task_ptr),
 				    sizeof(struct rga_req) * user_request->task_num))) {
 		pr_err("rga_user_request task list copy_from_user failed\n");
 		ret = -EFAULT;
 		goto err_free_task_list;
 	}
+#endif
 
 	spin_lock_irqsave(&request->lock, flags);
 
@@ -964,7 +992,10 @@ struct rga_request *rga_request_config(s
 	spin_unlock_irqrestore(&request->lock, flags);
 
 	return request;
-
+#ifdef CONFIG_ROCKCHIP_MULTI_RGA_LEGACY_ABI
+err_free_old_task_list:
+	kfree(old_task_list);
+#endif
 err_free_task_list:
 	kfree(task_list);
 err_put_request:
