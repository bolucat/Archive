From bc7335e392ad72c96b8b9c2737a514508c444674 Mon Sep 17 00:00:00 2001
From: jjm2473 <1129525450@qq.com>
Date: Thu, 11 May 2023 18:39:22 +0800
Subject: [PATCH 24/42] drivers: add rockchip rtc

---
 drivers/rtc/Kconfig     |  4 ++--
 drivers/rtc/rtc-rk808.c | 53 ++++++++++++++++++++++++++++++++++++-----
 2 files changed, 49 insertions(+), 8 deletions(-)

--- a/drivers/rtc/Kconfig
+++ b/drivers/rtc/Kconfig
@@ -375,11 +375,11 @@ config RTC_DRV_MAX77686
 	  will be called rtc-max77686.
 
 config RTC_DRV_RK808
-	tristate "Rockchip RK805/RK808/RK809/RK817/RK818 RTC"
+	tristate "Rockchip RK805/RK808/RK809/RK816/RK817/RK818 RTC"
 	depends on MFD_RK808
 	help
 	  If you say yes here you will get support for the
-	  RTC of RK805, RK809 and RK817, RK808 and RK818 PMIC.
+	  RTC of RK805, RK809 and RK817, RK808, RK816 and RK818 PMIC.
 
 	  This driver can also be built as a module. If so, the module
 	  will be called rk808-rtc.
--- a/drivers/rtc/rtc-rk808.c
+++ b/drivers/rtc/rtc-rk808.c
@@ -37,6 +37,7 @@
 #define YEARS_REG_MSK		0xFF
 #define WEEKS_REG_MSK		0x7
 
+#define RTC_NEED_TRANSITIONS	BIT(0)
 /* REG_SECONDS_REG through REG_YEARS_REG is how many registers? */
 
 #define NUM_TIME_REGS	(RK808_WEEKS_REG - RK808_SECONDS_REG + 1)
@@ -55,6 +56,7 @@ struct rk808_rtc {
 	struct rtc_device *rtc;
 	struct rk_rtc_compat_reg *creg;
 	int irq;
+	unsigned int flag;
 };
 
 /*
@@ -138,8 +140,13 @@ static int rk808_rtc_readtime(struct dev
 	tm->tm_mon = (bcd2bin(rtc_data[4] & MONTHS_REG_MSK)) - 1;
 	tm->tm_year = (bcd2bin(rtc_data[5] & YEARS_REG_MSK)) + 100;
 	tm->tm_wday = bcd2bin(rtc_data[6] & WEEKS_REG_MSK);
-	rockchip_to_gregorian(tm);
-	dev_dbg(dev, "RTC date/time %ptRd(%d) %ptRt\n", tm, tm->tm_wday, tm);
+
+	if (rk808_rtc->flag & RTC_NEED_TRANSITIONS)
+		rockchip_to_gregorian(tm);
+
+	dev_dbg(dev, "RTC date/time %4d-%02d-%02d(%d) %02d:%02d:%02d\n",
+		1900 + tm->tm_year, tm->tm_mon + 1, tm->tm_mday,
+		tm->tm_wday, tm->tm_hour, tm->tm_min, tm->tm_sec);
 
 	return ret;
 }
@@ -152,8 +159,13 @@ static int rk808_rtc_set_time(struct dev
 	u8 rtc_data[NUM_TIME_REGS];
 	int ret;
 
-	dev_dbg(dev, "set RTC date/time %ptRd(%d) %ptRt\n", tm, tm->tm_wday, tm);
-	gregorian_to_rockchip(tm);
+	dev_dbg(dev, "set RTC date/time %4d-%02d-%02d(%d) %02d:%02d:%02d\n",
+		1900 + tm->tm_year, tm->tm_mon + 1, tm->tm_mday,
+		tm->tm_wday, tm->tm_hour, tm->tm_min, tm->tm_sec);
+
+	if (rk808_rtc->flag & RTC_NEED_TRANSITIONS)
+		gregorian_to_rockchip(tm);
+
 	rtc_data[0] = bin2bcd(tm->tm_sec);
 	rtc_data[1] = bin2bcd(tm->tm_min);
 	rtc_data[2] = bin2bcd(tm->tm_hour);
@@ -210,7 +222,9 @@ static int rk808_rtc_readalarm(struct de
 	alrm->time.tm_mday = bcd2bin(alrm_data[3] & DAYS_REG_MSK);
 	alrm->time.tm_mon = (bcd2bin(alrm_data[4] & MONTHS_REG_MSK)) - 1;
 	alrm->time.tm_year = (bcd2bin(alrm_data[5] & YEARS_REG_MSK)) + 100;
-	rockchip_to_gregorian(&alrm->time);
+
+	if (rk808_rtc->flag & RTC_NEED_TRANSITIONS)
+		rockchip_to_gregorian(&alrm->time);
 
 	ret = regmap_read(rk808->regmap, rk808_rtc->creg->int_reg, &int_reg);
 	if (ret) {
@@ -264,7 +278,9 @@ static int rk808_rtc_setalarm(struct dev
 	dev_dbg(dev, "alrm set RTC date/time %ptRd(%d) %ptRt\n",
 		&alrm->time, alrm->time.tm_wday, &alrm->time);
 
-	gregorian_to_rockchip(&alrm->time);
+	if (rk808_rtc->flag & RTC_NEED_TRANSITIONS)
+		gregorian_to_rockchip(&alrm->time);
+
 	alrm_data[0] = bin2bcd(alrm->time.tm_sec);
 	alrm_data[1] = bin2bcd(alrm->time.tm_min);
 	alrm_data[2] = bin2bcd(alrm->time.tm_hour);
@@ -388,13 +404,38 @@ static int rk808_rtc_probe(struct platfo
 {
 	struct rk808 *rk808 = dev_get_drvdata(pdev->dev.parent);
 	struct rk808_rtc *rk808_rtc;
+	struct device_node *np;
 	int ret;
 
+	switch (rk808->variant) {
+	case RK805_ID:
+	case RK808_ID:
+	case RK816_ID:
+	case RK818_ID:
+		np = of_get_child_by_name(pdev->dev.parent->of_node, "rtc");
+		if (np && !of_device_is_available(np)) {
+			dev_info(&pdev->dev, "device is disabled\n");
+			return -EINVAL;
+		}
+		break;
+	default:
+		break;
+	}
+
 	rk808_rtc = devm_kzalloc(&pdev->dev, sizeof(*rk808_rtc), GFP_KERNEL);
 	if (rk808_rtc == NULL)
 		return -ENOMEM;
 
 	switch (rk808->variant) {
+	case RK808_ID:
+	case RK818_ID:
+		rk808_rtc->creg = &rk808_creg;
+		rk808_rtc->flag |= RTC_NEED_TRANSITIONS;
+		break;
+	case RK805_ID:
+	case RK816_ID:
+		rk808_rtc->creg = &rk808_creg;
+		break;
 	case RK809_ID:
 	case RK817_ID:
 		rk808_rtc->creg = &rk817_creg;
