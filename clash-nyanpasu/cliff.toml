# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% set whitespace = " " %}
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | filter(attribute="breaking", value=true) | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits | filter(attribute="scope") | sort(attribute="scope") %}
        - **{{ commit.scope | trim_end}}:**{{ whitespace }}{{ commit.message | upper_first | trim_end }}\
          {% if commit.github.username %} by @{{ commit.github.username }} {% else %} by {{ commit.author.name }} {%- endif -%}
          {% if commit.github.pr_number %} in \
            [#{{ commit.github.pr_number }}]({{ self::remote_url() }}/pull/{{ commit.github.pr_number }}) \
    {%- endif %}
    {% endfor %}\
    {% for commit in commits %}{% if not commit.scope %}
        - {{ commit.message | upper_first | trim_end }}\
          {% if commit.github.username %} by @{{ commit.github.username }} {% else %} by {{ commit.author.name }} {%- endif -%}
          {% if commit.github.pr_number %} in \
            [#{{ commit.github.pr_number }}]({{ self::remote_url() }}/pull/{{ commit.github.pr_number }}) \
          {%- endif %}
        {% else %}{%- endif -%}
    {% endfor %}
{% endfor %}
{% for group, commits in commits | filter(attribute="breaking", value=false) | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits | filter(attribute="scope") | sort(attribute="scope") %}
        - **{{ commit.scope | trim_end}}:**{{ whitespace }}{{ commit.message | upper_first | trim_end }}\
          {% if commit.github.username %} by @{{ commit.github.username }} {% else %} by {{ commit.author.name }} {%- endif -%}
          {% if commit.github.pr_number %} in \
            [#{{ commit.github.pr_number }}]({{ self::remote_url() }}/pull/{{ commit.github.pr_number }}) \
    {%- endif %}
    {% endfor %}\
    {% for commit in commits %}{% if not commit.scope %}
        - {{ commit.message | upper_first | trim_end }}\
          {% if commit.github.username %} by @{{ commit.github.username }} {% else %} by {{ commit.author.name }} {%- endif -%}
          {% if commit.github.pr_number %} in \
            [#{{ commit.github.pr_number }}]({{ self::remote_url() }}/pull/{{ commit.github.pr_number }}) \
          {%- endif %}
        {% else %}{%- endif -%}
    {% endfor %}
{% endfor %}\n

{%- if github -%}

-----------------

{% if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}
  {% raw %}\n{% endraw -%}
  ## New Contributors
{%- endif %}\
{% for contributor in github.contributors | filter(attribute="is_first_time", value=true) %}
  * @{{ contributor.username }} made their first contribution
    {%- if contributor.pr_number %} in \
      [#{{ contributor.pr_number }}]({{ self::remote_url() }}/pull/{{ contributor.pr_number }}) \
    {%- endif %}
{%- endfor -%}

{% if version %}
    {% if previous.version %}
      **Full Changelog**: {{ self::remote_url() }}/compare/{{ previous.version }}...{{ version }}
    {% endif %}
{% else -%}
  {% raw %}\n{% endraw %}
{% endif %}
{% endif %}

{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}
"""
# template for the changelog footer
footer = """"""
# remove the leading and trailing whitespace from the templates
trim = true

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = false
# regex for parsing and grouping commits
commit_parsers = [
  { field = "author.name", pattern = "renovate\\[bot\\]", group = "Renovate", skip = true },
  { field = "scope", pattern = "manifest", message = "^chore", skip = true },
  { field = "breaking", pattern = "true", group = "üí• Breaking Changes" },
  { message = "^feat", group = "‚ú® Features" },
  { message = "^fix", group = "üêõ Bug Fixes" },
  { message = "^doc", group = "üìö Documentation" },
  { message = "^perf", group = "‚ö° Performance Improvements" },
  { message = "^refactor", group = "üî® Refactor" },
  { message = "^style", group = "üíÖ Styling" },
  { message = "^test", group = "‚úÖ Testing" },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore: bump version", skip = true },
  { message = "^chore", group = "üßπ Miscellaneous Tasks" },
  { body = ".*security", group = "üõ°Ô∏è Security" },
  { body = ".*", group = "Other (unconventional)", skip = true },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
tag_pattern = "v[0-9].*"
# regex for skipping tags
skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
