// Code generated by mockery v2.43.0. DO NOT EDIT.

package server

import mock "github.com/stretchr/testify/mock"

// mockUDPEventLogger is an autogenerated mock type for the udpEventLogger type
type mockUDPEventLogger struct {
	mock.Mock
}

type mockUDPEventLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *mockUDPEventLogger) EXPECT() *mockUDPEventLogger_Expecter {
	return &mockUDPEventLogger_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: sessionID, err
func (_m *mockUDPEventLogger) Close(sessionID uint32, err error) {
	_m.Called(sessionID, err)
}

// mockUDPEventLogger_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type mockUDPEventLogger_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - sessionID uint32
//   - err error
func (_e *mockUDPEventLogger_Expecter) Close(sessionID interface{}, err interface{}) *mockUDPEventLogger_Close_Call {
	return &mockUDPEventLogger_Close_Call{Call: _e.mock.On("Close", sessionID, err)}
}

func (_c *mockUDPEventLogger_Close_Call) Run(run func(sessionID uint32, err error)) *mockUDPEventLogger_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint32), args[1].(error))
	})
	return _c
}

func (_c *mockUDPEventLogger_Close_Call) Return() *mockUDPEventLogger_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockUDPEventLogger_Close_Call) RunAndReturn(run func(uint32, error)) *mockUDPEventLogger_Close_Call {
	_c.Call.Return(run)
	return _c
}

// New provides a mock function with given fields: sessionID, reqAddr
func (_m *mockUDPEventLogger) New(sessionID uint32, reqAddr string) {
	_m.Called(sessionID, reqAddr)
}

// mockUDPEventLogger_New_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'New'
type mockUDPEventLogger_New_Call struct {
	*mock.Call
}

// New is a helper method to define mock.On call
//   - sessionID uint32
//   - reqAddr string
func (_e *mockUDPEventLogger_Expecter) New(sessionID interface{}, reqAddr interface{}) *mockUDPEventLogger_New_Call {
	return &mockUDPEventLogger_New_Call{Call: _e.mock.On("New", sessionID, reqAddr)}
}

func (_c *mockUDPEventLogger_New_Call) Run(run func(sessionID uint32, reqAddr string)) *mockUDPEventLogger_New_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint32), args[1].(string))
	})
	return _c
}

func (_c *mockUDPEventLogger_New_Call) Return() *mockUDPEventLogger_New_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockUDPEventLogger_New_Call) RunAndReturn(run func(uint32, string)) *mockUDPEventLogger_New_Call {
	_c.Call.Return(run)
	return _c
}

// newMockUDPEventLogger creates a new instance of mockUDPEventLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockUDPEventLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockUDPEventLogger {
	mock := &mockUDPEventLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
