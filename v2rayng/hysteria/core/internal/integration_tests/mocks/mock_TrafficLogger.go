// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	quic "github.com/apernet/quic-go"
	mock "github.com/stretchr/testify/mock"

	server "github.com/apernet/hysteria/core/v2/server"
)

// MockTrafficLogger is an autogenerated mock type for the TrafficLogger type
type MockTrafficLogger struct {
	mock.Mock
}

type MockTrafficLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTrafficLogger) EXPECT() *MockTrafficLogger_Expecter {
	return &MockTrafficLogger_Expecter{mock: &_m.Mock}
}

// LogOnlineState provides a mock function with given fields: id, online
func (_m *MockTrafficLogger) LogOnlineState(id string, online bool) {
	_m.Called(id, online)
}

// MockTrafficLogger_LogOnlineState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogOnlineState'
type MockTrafficLogger_LogOnlineState_Call struct {
	*mock.Call
}

// LogOnlineState is a helper method to define mock.On call
//   - id string
//   - online bool
func (_e *MockTrafficLogger_Expecter) LogOnlineState(id interface{}, online interface{}) *MockTrafficLogger_LogOnlineState_Call {
	return &MockTrafficLogger_LogOnlineState_Call{Call: _e.mock.On("LogOnlineState", id, online)}
}

func (_c *MockTrafficLogger_LogOnlineState_Call) Run(run func(id string, online bool)) *MockTrafficLogger_LogOnlineState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *MockTrafficLogger_LogOnlineState_Call) Return() *MockTrafficLogger_LogOnlineState_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTrafficLogger_LogOnlineState_Call) RunAndReturn(run func(string, bool)) *MockTrafficLogger_LogOnlineState_Call {
	_c.Call.Return(run)
	return _c
}

// LogTraffic provides a mock function with given fields: id, tx, rx
func (_m *MockTrafficLogger) LogTraffic(id string, tx uint64, rx uint64) bool {
	ret := _m.Called(id, tx, rx)

	if len(ret) == 0 {
		panic("no return value specified for LogTraffic")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, uint64, uint64) bool); ok {
		r0 = rf(id, tx, rx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockTrafficLogger_LogTraffic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogTraffic'
type MockTrafficLogger_LogTraffic_Call struct {
	*mock.Call
}

// LogTraffic is a helper method to define mock.On call
//   - id string
//   - tx uint64
//   - rx uint64
func (_e *MockTrafficLogger_Expecter) LogTraffic(id interface{}, tx interface{}, rx interface{}) *MockTrafficLogger_LogTraffic_Call {
	return &MockTrafficLogger_LogTraffic_Call{Call: _e.mock.On("LogTraffic", id, tx, rx)}
}

func (_c *MockTrafficLogger_LogTraffic_Call) Run(run func(id string, tx uint64, rx uint64)) *MockTrafficLogger_LogTraffic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uint64), args[2].(uint64))
	})
	return _c
}

func (_c *MockTrafficLogger_LogTraffic_Call) Return(ok bool) *MockTrafficLogger_LogTraffic_Call {
	_c.Call.Return(ok)
	return _c
}

func (_c *MockTrafficLogger_LogTraffic_Call) RunAndReturn(run func(string, uint64, uint64) bool) *MockTrafficLogger_LogTraffic_Call {
	_c.Call.Return(run)
	return _c
}

// TraceStream provides a mock function with given fields: stream, stats
func (_m *MockTrafficLogger) TraceStream(stream quic.Stream, stats *server.StreamStats) {
	_m.Called(stream, stats)
}

// MockTrafficLogger_TraceStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TraceStream'
type MockTrafficLogger_TraceStream_Call struct {
	*mock.Call
}

// TraceStream is a helper method to define mock.On call
//   - stream quic.Stream
//   - stats *server.StreamStats
func (_e *MockTrafficLogger_Expecter) TraceStream(stream interface{}, stats interface{}) *MockTrafficLogger_TraceStream_Call {
	return &MockTrafficLogger_TraceStream_Call{Call: _e.mock.On("TraceStream", stream, stats)}
}

func (_c *MockTrafficLogger_TraceStream_Call) Run(run func(stream quic.Stream, stats *server.StreamStats)) *MockTrafficLogger_TraceStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(quic.Stream), args[1].(*server.StreamStats))
	})
	return _c
}

func (_c *MockTrafficLogger_TraceStream_Call) Return() *MockTrafficLogger_TraceStream_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTrafficLogger_TraceStream_Call) RunAndReturn(run func(quic.Stream, *server.StreamStats)) *MockTrafficLogger_TraceStream_Call {
	_c.Call.Return(run)
	return _c
}

// UntraceStream provides a mock function with given fields: stream
func (_m *MockTrafficLogger) UntraceStream(stream quic.Stream) {
	_m.Called(stream)
}

// MockTrafficLogger_UntraceStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntraceStream'
type MockTrafficLogger_UntraceStream_Call struct {
	*mock.Call
}

// UntraceStream is a helper method to define mock.On call
//   - stream quic.Stream
func (_e *MockTrafficLogger_Expecter) UntraceStream(stream interface{}) *MockTrafficLogger_UntraceStream_Call {
	return &MockTrafficLogger_UntraceStream_Call{Call: _e.mock.On("UntraceStream", stream)}
}

func (_c *MockTrafficLogger_UntraceStream_Call) Run(run func(stream quic.Stream)) *MockTrafficLogger_UntraceStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(quic.Stream))
	})
	return _c
}

func (_c *MockTrafficLogger_UntraceStream_Call) Return() *MockTrafficLogger_UntraceStream_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTrafficLogger_UntraceStream_Call) RunAndReturn(run func(quic.Stream)) *MockTrafficLogger_UntraceStream_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTrafficLogger creates a new instance of MockTrafficLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTrafficLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTrafficLogger {
	mock := &MockTrafficLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
