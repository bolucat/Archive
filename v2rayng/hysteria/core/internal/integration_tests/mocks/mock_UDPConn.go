// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockUDPConn is an autogenerated mock type for the UDPConn type
type MockUDPConn struct {
	mock.Mock
}

type MockUDPConn_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUDPConn) EXPECT() *MockUDPConn_Expecter {
	return &MockUDPConn_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockUDPConn) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUDPConn_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockUDPConn_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockUDPConn_Expecter) Close() *MockUDPConn_Close_Call {
	return &MockUDPConn_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockUDPConn_Close_Call) Run(run func()) *MockUDPConn_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUDPConn_Close_Call) Return(_a0 error) *MockUDPConn_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUDPConn_Close_Call) RunAndReturn(run func() error) *MockUDPConn_Close_Call {
	_c.Call.Return(run)
	return _c
}

// ReadFrom provides a mock function with given fields: b
func (_m *MockUDPConn) ReadFrom(b []byte) (int, string, error) {
	ret := _m.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for ReadFrom")
	}

	var r0 int
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func([]byte) (int, string, error)); ok {
		return rf(b)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) string); ok {
		r1 = rf(b)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func([]byte) error); ok {
		r2 = rf(b)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockUDPConn_ReadFrom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFrom'
type MockUDPConn_ReadFrom_Call struct {
	*mock.Call
}

// ReadFrom is a helper method to define mock.On call
//   - b []byte
func (_e *MockUDPConn_Expecter) ReadFrom(b interface{}) *MockUDPConn_ReadFrom_Call {
	return &MockUDPConn_ReadFrom_Call{Call: _e.mock.On("ReadFrom", b)}
}

func (_c *MockUDPConn_ReadFrom_Call) Run(run func(b []byte)) *MockUDPConn_ReadFrom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockUDPConn_ReadFrom_Call) Return(_a0 int, _a1 string, _a2 error) *MockUDPConn_ReadFrom_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockUDPConn_ReadFrom_Call) RunAndReturn(run func([]byte) (int, string, error)) *MockUDPConn_ReadFrom_Call {
	_c.Call.Return(run)
	return _c
}

// WriteTo provides a mock function with given fields: b, addr
func (_m *MockUDPConn) WriteTo(b []byte, addr string) (int, error) {
	ret := _m.Called(b, addr)

	if len(ret) == 0 {
		panic("no return value specified for WriteTo")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, string) (int, error)); ok {
		return rf(b, addr)
	}
	if rf, ok := ret.Get(0).(func([]byte, string) int); ok {
		r0 = rf(b, addr)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte, string) error); ok {
		r1 = rf(b, addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUDPConn_WriteTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteTo'
type MockUDPConn_WriteTo_Call struct {
	*mock.Call
}

// WriteTo is a helper method to define mock.On call
//   - b []byte
//   - addr string
func (_e *MockUDPConn_Expecter) WriteTo(b interface{}, addr interface{}) *MockUDPConn_WriteTo_Call {
	return &MockUDPConn_WriteTo_Call{Call: _e.mock.On("WriteTo", b, addr)}
}

func (_c *MockUDPConn_WriteTo_Call) Run(run func(b []byte, addr string)) *MockUDPConn_WriteTo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(string))
	})
	return _c
}

func (_c *MockUDPConn_WriteTo_Call) Return(_a0 int, _a1 error) *MockUDPConn_WriteTo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUDPConn_WriteTo_Call) RunAndReturn(run func([]byte, string) (int, error)) *MockUDPConn_WriteTo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUDPConn creates a new instance of MockUDPConn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUDPConn(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUDPConn {
	mock := &MockUDPConn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
