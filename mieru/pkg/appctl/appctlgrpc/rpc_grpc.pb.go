// Copyright (C) 2024  mieru authors
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.3
// source: appctl/proto/rpc.proto

package appctlgrpc

import (
	context "context"
	appctlpb "github.com/enfein/mieru/v3/pkg/appctl/appctlpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClientManagementService_GetStatus_FullMethodName           = "/appctl.ClientManagementService/GetStatus"
	ClientManagementService_Exit_FullMethodName                = "/appctl.ClientManagementService/Exit"
	ClientManagementService_GetMetrics_FullMethodName          = "/appctl.ClientManagementService/GetMetrics"
	ClientManagementService_GetSessionInfoList_FullMethodName  = "/appctl.ClientManagementService/GetSessionInfoList"
	ClientManagementService_GetThreadDump_FullMethodName       = "/appctl.ClientManagementService/GetThreadDump"
	ClientManagementService_StartCPUProfile_FullMethodName     = "/appctl.ClientManagementService/StartCPUProfile"
	ClientManagementService_StopCPUProfile_FullMethodName      = "/appctl.ClientManagementService/StopCPUProfile"
	ClientManagementService_GetHeapProfile_FullMethodName      = "/appctl.ClientManagementService/GetHeapProfile"
	ClientManagementService_GetMemoryStatistics_FullMethodName = "/appctl.ClientManagementService/GetMemoryStatistics"
)

// ClientManagementServiceClient is the client API for ClientManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientManagementServiceClient interface {
	// Fetch client application status.
	GetStatus(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.AppStatusMsg, error)
	// Quit client daemon.
	Exit(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.Empty, error)
	// Get client metrics.
	GetMetrics(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.Metrics, error)
	// Get client session information.
	GetSessionInfoList(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.SessionInfoList, error)
	// Generate a thread dump of client daemon.
	GetThreadDump(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.ThreadDump, error)
	// Start CPU profiling.
	StartCPUProfile(ctx context.Context, in *appctlpb.ProfileSavePath, opts ...grpc.CallOption) (*appctlpb.Empty, error)
	// Stop CPU profiling.
	StopCPUProfile(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.Empty, error)
	// Generate a heap profile.
	GetHeapProfile(ctx context.Context, in *appctlpb.ProfileSavePath, opts ...grpc.CallOption) (*appctlpb.Empty, error)
	// Get memory statistics of client daemon.
	GetMemoryStatistics(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.MemoryStatistics, error)
}

type clientManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientManagementServiceClient(cc grpc.ClientConnInterface) ClientManagementServiceClient {
	return &clientManagementServiceClient{cc}
}

func (c *clientManagementServiceClient) GetStatus(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.AppStatusMsg, error) {
	out := new(appctlpb.AppStatusMsg)
	err := c.cc.Invoke(ctx, ClientManagementService_GetStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientManagementServiceClient) Exit(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.Empty, error) {
	out := new(appctlpb.Empty)
	err := c.cc.Invoke(ctx, ClientManagementService_Exit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientManagementServiceClient) GetMetrics(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.Metrics, error) {
	out := new(appctlpb.Metrics)
	err := c.cc.Invoke(ctx, ClientManagementService_GetMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientManagementServiceClient) GetSessionInfoList(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.SessionInfoList, error) {
	out := new(appctlpb.SessionInfoList)
	err := c.cc.Invoke(ctx, ClientManagementService_GetSessionInfoList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientManagementServiceClient) GetThreadDump(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.ThreadDump, error) {
	out := new(appctlpb.ThreadDump)
	err := c.cc.Invoke(ctx, ClientManagementService_GetThreadDump_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientManagementServiceClient) StartCPUProfile(ctx context.Context, in *appctlpb.ProfileSavePath, opts ...grpc.CallOption) (*appctlpb.Empty, error) {
	out := new(appctlpb.Empty)
	err := c.cc.Invoke(ctx, ClientManagementService_StartCPUProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientManagementServiceClient) StopCPUProfile(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.Empty, error) {
	out := new(appctlpb.Empty)
	err := c.cc.Invoke(ctx, ClientManagementService_StopCPUProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientManagementServiceClient) GetHeapProfile(ctx context.Context, in *appctlpb.ProfileSavePath, opts ...grpc.CallOption) (*appctlpb.Empty, error) {
	out := new(appctlpb.Empty)
	err := c.cc.Invoke(ctx, ClientManagementService_GetHeapProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientManagementServiceClient) GetMemoryStatistics(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.MemoryStatistics, error) {
	out := new(appctlpb.MemoryStatistics)
	err := c.cc.Invoke(ctx, ClientManagementService_GetMemoryStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientManagementServiceServer is the server API for ClientManagementService service.
// All implementations must embed UnimplementedClientManagementServiceServer
// for forward compatibility
type ClientManagementServiceServer interface {
	// Fetch client application status.
	GetStatus(context.Context, *appctlpb.Empty) (*appctlpb.AppStatusMsg, error)
	// Quit client daemon.
	Exit(context.Context, *appctlpb.Empty) (*appctlpb.Empty, error)
	// Get client metrics.
	GetMetrics(context.Context, *appctlpb.Empty) (*appctlpb.Metrics, error)
	// Get client session information.
	GetSessionInfoList(context.Context, *appctlpb.Empty) (*appctlpb.SessionInfoList, error)
	// Generate a thread dump of client daemon.
	GetThreadDump(context.Context, *appctlpb.Empty) (*appctlpb.ThreadDump, error)
	// Start CPU profiling.
	StartCPUProfile(context.Context, *appctlpb.ProfileSavePath) (*appctlpb.Empty, error)
	// Stop CPU profiling.
	StopCPUProfile(context.Context, *appctlpb.Empty) (*appctlpb.Empty, error)
	// Generate a heap profile.
	GetHeapProfile(context.Context, *appctlpb.ProfileSavePath) (*appctlpb.Empty, error)
	// Get memory statistics of client daemon.
	GetMemoryStatistics(context.Context, *appctlpb.Empty) (*appctlpb.MemoryStatistics, error)
	mustEmbedUnimplementedClientManagementServiceServer()
}

// UnimplementedClientManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClientManagementServiceServer struct {
}

func (UnimplementedClientManagementServiceServer) GetStatus(context.Context, *appctlpb.Empty) (*appctlpb.AppStatusMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedClientManagementServiceServer) Exit(context.Context, *appctlpb.Empty) (*appctlpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exit not implemented")
}
func (UnimplementedClientManagementServiceServer) GetMetrics(context.Context, *appctlpb.Empty) (*appctlpb.Metrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedClientManagementServiceServer) GetSessionInfoList(context.Context, *appctlpb.Empty) (*appctlpb.SessionInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionInfoList not implemented")
}
func (UnimplementedClientManagementServiceServer) GetThreadDump(context.Context, *appctlpb.Empty) (*appctlpb.ThreadDump, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThreadDump not implemented")
}
func (UnimplementedClientManagementServiceServer) StartCPUProfile(context.Context, *appctlpb.ProfileSavePath) (*appctlpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCPUProfile not implemented")
}
func (UnimplementedClientManagementServiceServer) StopCPUProfile(context.Context, *appctlpb.Empty) (*appctlpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopCPUProfile not implemented")
}
func (UnimplementedClientManagementServiceServer) GetHeapProfile(context.Context, *appctlpb.ProfileSavePath) (*appctlpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeapProfile not implemented")
}
func (UnimplementedClientManagementServiceServer) GetMemoryStatistics(context.Context, *appctlpb.Empty) (*appctlpb.MemoryStatistics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemoryStatistics not implemented")
}
func (UnimplementedClientManagementServiceServer) mustEmbedUnimplementedClientManagementServiceServer() {
}

// UnsafeClientManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientManagementServiceServer will
// result in compilation errors.
type UnsafeClientManagementServiceServer interface {
	mustEmbedUnimplementedClientManagementServiceServer()
}

func RegisterClientManagementServiceServer(s grpc.ServiceRegistrar, srv ClientManagementServiceServer) {
	s.RegisterService(&ClientManagementService_ServiceDesc, srv)
}

func _ClientManagementService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(appctlpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientManagementServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientManagementService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientManagementServiceServer).GetStatus(ctx, req.(*appctlpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientManagementService_Exit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(appctlpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientManagementServiceServer).Exit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientManagementService_Exit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientManagementServiceServer).Exit(ctx, req.(*appctlpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientManagementService_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(appctlpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientManagementServiceServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientManagementService_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientManagementServiceServer).GetMetrics(ctx, req.(*appctlpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientManagementService_GetSessionInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(appctlpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientManagementServiceServer).GetSessionInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientManagementService_GetSessionInfoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientManagementServiceServer).GetSessionInfoList(ctx, req.(*appctlpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientManagementService_GetThreadDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(appctlpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientManagementServiceServer).GetThreadDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientManagementService_GetThreadDump_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientManagementServiceServer).GetThreadDump(ctx, req.(*appctlpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientManagementService_StartCPUProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(appctlpb.ProfileSavePath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientManagementServiceServer).StartCPUProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientManagementService_StartCPUProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientManagementServiceServer).StartCPUProfile(ctx, req.(*appctlpb.ProfileSavePath))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientManagementService_StopCPUProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(appctlpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientManagementServiceServer).StopCPUProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientManagementService_StopCPUProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientManagementServiceServer).StopCPUProfile(ctx, req.(*appctlpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientManagementService_GetHeapProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(appctlpb.ProfileSavePath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientManagementServiceServer).GetHeapProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientManagementService_GetHeapProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientManagementServiceServer).GetHeapProfile(ctx, req.(*appctlpb.ProfileSavePath))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientManagementService_GetMemoryStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(appctlpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientManagementServiceServer).GetMemoryStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientManagementService_GetMemoryStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientManagementServiceServer).GetMemoryStatistics(ctx, req.(*appctlpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientManagementService_ServiceDesc is the grpc.ServiceDesc for ClientManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appctl.ClientManagementService",
	HandlerType: (*ClientManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _ClientManagementService_GetStatus_Handler,
		},
		{
			MethodName: "Exit",
			Handler:    _ClientManagementService_Exit_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _ClientManagementService_GetMetrics_Handler,
		},
		{
			MethodName: "GetSessionInfoList",
			Handler:    _ClientManagementService_GetSessionInfoList_Handler,
		},
		{
			MethodName: "GetThreadDump",
			Handler:    _ClientManagementService_GetThreadDump_Handler,
		},
		{
			MethodName: "StartCPUProfile",
			Handler:    _ClientManagementService_StartCPUProfile_Handler,
		},
		{
			MethodName: "StopCPUProfile",
			Handler:    _ClientManagementService_StopCPUProfile_Handler,
		},
		{
			MethodName: "GetHeapProfile",
			Handler:    _ClientManagementService_GetHeapProfile_Handler,
		},
		{
			MethodName: "GetMemoryStatistics",
			Handler:    _ClientManagementService_GetMemoryStatistics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "appctl/proto/rpc.proto",
}

const (
	ServerManagementService_GetStatus_FullMethodName           = "/appctl.ServerManagementService/GetStatus"
	ServerManagementService_Start_FullMethodName               = "/appctl.ServerManagementService/Start"
	ServerManagementService_Stop_FullMethodName                = "/appctl.ServerManagementService/Stop"
	ServerManagementService_GetConfig_FullMethodName           = "/appctl.ServerManagementService/GetConfig"
	ServerManagementService_SetConfig_FullMethodName           = "/appctl.ServerManagementService/SetConfig"
	ServerManagementService_Reload_FullMethodName              = "/appctl.ServerManagementService/Reload"
	ServerManagementService_Exit_FullMethodName                = "/appctl.ServerManagementService/Exit"
	ServerManagementService_GetMetrics_FullMethodName          = "/appctl.ServerManagementService/GetMetrics"
	ServerManagementService_GetSessionInfoList_FullMethodName  = "/appctl.ServerManagementService/GetSessionInfoList"
	ServerManagementService_GetUsers_FullMethodName            = "/appctl.ServerManagementService/GetUsers"
	ServerManagementService_GetThreadDump_FullMethodName       = "/appctl.ServerManagementService/GetThreadDump"
	ServerManagementService_StartCPUProfile_FullMethodName     = "/appctl.ServerManagementService/StartCPUProfile"
	ServerManagementService_StopCPUProfile_FullMethodName      = "/appctl.ServerManagementService/StopCPUProfile"
	ServerManagementService_GetHeapProfile_FullMethodName      = "/appctl.ServerManagementService/GetHeapProfile"
	ServerManagementService_GetMemoryStatistics_FullMethodName = "/appctl.ServerManagementService/GetMemoryStatistics"
)

// ServerManagementServiceClient is the client API for ServerManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerManagementServiceClient interface {
	// Fetch server application status.
	GetStatus(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.AppStatusMsg, error)
	// Start proxy in server application.
	Start(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.Empty, error)
	// Stop proxy in server application.
	Stop(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.Empty, error)
	// Fetch the server config.
	GetConfig(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.ServerConfig, error)
	// Update server config.
	SetConfig(ctx context.Context, in *appctlpb.ServerConfig, opts ...grpc.CallOption) (*appctlpb.ServerConfig, error)
	// Reload server configuration.
	Reload(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.Empty, error)
	// Quit server daemon.
	Exit(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.Empty, error)
	// Get server metrics.
	GetMetrics(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.Metrics, error)
	// Get server session information.
	GetSessionInfoList(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.SessionInfoList, error)
	// Get users setting and runtime information.
	GetUsers(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.UserWithMetricsList, error)
	// Generate a thread dump of server daemon.
	GetThreadDump(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.ThreadDump, error)
	// Start CPU profiling.
	StartCPUProfile(ctx context.Context, in *appctlpb.ProfileSavePath, opts ...grpc.CallOption) (*appctlpb.Empty, error)
	// Stop CPU profiling.
	StopCPUProfile(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.Empty, error)
	// Generate a heap profile.
	GetHeapProfile(ctx context.Context, in *appctlpb.ProfileSavePath, opts ...grpc.CallOption) (*appctlpb.Empty, error)
	// Get memory statistics of server daemon.
	GetMemoryStatistics(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.MemoryStatistics, error)
}

type serverManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServerManagementServiceClient(cc grpc.ClientConnInterface) ServerManagementServiceClient {
	return &serverManagementServiceClient{cc}
}

func (c *serverManagementServiceClient) GetStatus(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.AppStatusMsg, error) {
	out := new(appctlpb.AppStatusMsg)
	err := c.cc.Invoke(ctx, ServerManagementService_GetStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagementServiceClient) Start(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.Empty, error) {
	out := new(appctlpb.Empty)
	err := c.cc.Invoke(ctx, ServerManagementService_Start_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagementServiceClient) Stop(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.Empty, error) {
	out := new(appctlpb.Empty)
	err := c.cc.Invoke(ctx, ServerManagementService_Stop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagementServiceClient) GetConfig(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.ServerConfig, error) {
	out := new(appctlpb.ServerConfig)
	err := c.cc.Invoke(ctx, ServerManagementService_GetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagementServiceClient) SetConfig(ctx context.Context, in *appctlpb.ServerConfig, opts ...grpc.CallOption) (*appctlpb.ServerConfig, error) {
	out := new(appctlpb.ServerConfig)
	err := c.cc.Invoke(ctx, ServerManagementService_SetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagementServiceClient) Reload(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.Empty, error) {
	out := new(appctlpb.Empty)
	err := c.cc.Invoke(ctx, ServerManagementService_Reload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagementServiceClient) Exit(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.Empty, error) {
	out := new(appctlpb.Empty)
	err := c.cc.Invoke(ctx, ServerManagementService_Exit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagementServiceClient) GetMetrics(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.Metrics, error) {
	out := new(appctlpb.Metrics)
	err := c.cc.Invoke(ctx, ServerManagementService_GetMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagementServiceClient) GetSessionInfoList(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.SessionInfoList, error) {
	out := new(appctlpb.SessionInfoList)
	err := c.cc.Invoke(ctx, ServerManagementService_GetSessionInfoList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagementServiceClient) GetUsers(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.UserWithMetricsList, error) {
	out := new(appctlpb.UserWithMetricsList)
	err := c.cc.Invoke(ctx, ServerManagementService_GetUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagementServiceClient) GetThreadDump(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.ThreadDump, error) {
	out := new(appctlpb.ThreadDump)
	err := c.cc.Invoke(ctx, ServerManagementService_GetThreadDump_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagementServiceClient) StartCPUProfile(ctx context.Context, in *appctlpb.ProfileSavePath, opts ...grpc.CallOption) (*appctlpb.Empty, error) {
	out := new(appctlpb.Empty)
	err := c.cc.Invoke(ctx, ServerManagementService_StartCPUProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagementServiceClient) StopCPUProfile(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.Empty, error) {
	out := new(appctlpb.Empty)
	err := c.cc.Invoke(ctx, ServerManagementService_StopCPUProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagementServiceClient) GetHeapProfile(ctx context.Context, in *appctlpb.ProfileSavePath, opts ...grpc.CallOption) (*appctlpb.Empty, error) {
	out := new(appctlpb.Empty)
	err := c.cc.Invoke(ctx, ServerManagementService_GetHeapProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagementServiceClient) GetMemoryStatistics(ctx context.Context, in *appctlpb.Empty, opts ...grpc.CallOption) (*appctlpb.MemoryStatistics, error) {
	out := new(appctlpb.MemoryStatistics)
	err := c.cc.Invoke(ctx, ServerManagementService_GetMemoryStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerManagementServiceServer is the server API for ServerManagementService service.
// All implementations must embed UnimplementedServerManagementServiceServer
// for forward compatibility
type ServerManagementServiceServer interface {
	// Fetch server application status.
	GetStatus(context.Context, *appctlpb.Empty) (*appctlpb.AppStatusMsg, error)
	// Start proxy in server application.
	Start(context.Context, *appctlpb.Empty) (*appctlpb.Empty, error)
	// Stop proxy in server application.
	Stop(context.Context, *appctlpb.Empty) (*appctlpb.Empty, error)
	// Fetch the server config.
	GetConfig(context.Context, *appctlpb.Empty) (*appctlpb.ServerConfig, error)
	// Update server config.
	SetConfig(context.Context, *appctlpb.ServerConfig) (*appctlpb.ServerConfig, error)
	// Reload server configuration.
	Reload(context.Context, *appctlpb.Empty) (*appctlpb.Empty, error)
	// Quit server daemon.
	Exit(context.Context, *appctlpb.Empty) (*appctlpb.Empty, error)
	// Get server metrics.
	GetMetrics(context.Context, *appctlpb.Empty) (*appctlpb.Metrics, error)
	// Get server session information.
	GetSessionInfoList(context.Context, *appctlpb.Empty) (*appctlpb.SessionInfoList, error)
	// Get users setting and runtime information.
	GetUsers(context.Context, *appctlpb.Empty) (*appctlpb.UserWithMetricsList, error)
	// Generate a thread dump of server daemon.
	GetThreadDump(context.Context, *appctlpb.Empty) (*appctlpb.ThreadDump, error)
	// Start CPU profiling.
	StartCPUProfile(context.Context, *appctlpb.ProfileSavePath) (*appctlpb.Empty, error)
	// Stop CPU profiling.
	StopCPUProfile(context.Context, *appctlpb.Empty) (*appctlpb.Empty, error)
	// Generate a heap profile.
	GetHeapProfile(context.Context, *appctlpb.ProfileSavePath) (*appctlpb.Empty, error)
	// Get memory statistics of server daemon.
	GetMemoryStatistics(context.Context, *appctlpb.Empty) (*appctlpb.MemoryStatistics, error)
	mustEmbedUnimplementedServerManagementServiceServer()
}

// UnimplementedServerManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServerManagementServiceServer struct {
}

func (UnimplementedServerManagementServiceServer) GetStatus(context.Context, *appctlpb.Empty) (*appctlpb.AppStatusMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedServerManagementServiceServer) Start(context.Context, *appctlpb.Empty) (*appctlpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedServerManagementServiceServer) Stop(context.Context, *appctlpb.Empty) (*appctlpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedServerManagementServiceServer) GetConfig(context.Context, *appctlpb.Empty) (*appctlpb.ServerConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedServerManagementServiceServer) SetConfig(context.Context, *appctlpb.ServerConfig) (*appctlpb.ServerConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedServerManagementServiceServer) Reload(context.Context, *appctlpb.Empty) (*appctlpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reload not implemented")
}
func (UnimplementedServerManagementServiceServer) Exit(context.Context, *appctlpb.Empty) (*appctlpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exit not implemented")
}
func (UnimplementedServerManagementServiceServer) GetMetrics(context.Context, *appctlpb.Empty) (*appctlpb.Metrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedServerManagementServiceServer) GetSessionInfoList(context.Context, *appctlpb.Empty) (*appctlpb.SessionInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionInfoList not implemented")
}
func (UnimplementedServerManagementServiceServer) GetUsers(context.Context, *appctlpb.Empty) (*appctlpb.UserWithMetricsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedServerManagementServiceServer) GetThreadDump(context.Context, *appctlpb.Empty) (*appctlpb.ThreadDump, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThreadDump not implemented")
}
func (UnimplementedServerManagementServiceServer) StartCPUProfile(context.Context, *appctlpb.ProfileSavePath) (*appctlpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCPUProfile not implemented")
}
func (UnimplementedServerManagementServiceServer) StopCPUProfile(context.Context, *appctlpb.Empty) (*appctlpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopCPUProfile not implemented")
}
func (UnimplementedServerManagementServiceServer) GetHeapProfile(context.Context, *appctlpb.ProfileSavePath) (*appctlpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeapProfile not implemented")
}
func (UnimplementedServerManagementServiceServer) GetMemoryStatistics(context.Context, *appctlpb.Empty) (*appctlpb.MemoryStatistics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemoryStatistics not implemented")
}
func (UnimplementedServerManagementServiceServer) mustEmbedUnimplementedServerManagementServiceServer() {
}

// UnsafeServerManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerManagementServiceServer will
// result in compilation errors.
type UnsafeServerManagementServiceServer interface {
	mustEmbedUnimplementedServerManagementServiceServer()
}

func RegisterServerManagementServiceServer(s grpc.ServiceRegistrar, srv ServerManagementServiceServer) {
	s.RegisterService(&ServerManagementService_ServiceDesc, srv)
}

func _ServerManagementService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(appctlpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagementServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagementService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagementServiceServer).GetStatus(ctx, req.(*appctlpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagementService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(appctlpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagementServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagementService_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagementServiceServer).Start(ctx, req.(*appctlpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagementService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(appctlpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagementServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagementService_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagementServiceServer).Stop(ctx, req.(*appctlpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagementService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(appctlpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagementServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagementService_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagementServiceServer).GetConfig(ctx, req.(*appctlpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagementService_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(appctlpb.ServerConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagementServiceServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagementService_SetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagementServiceServer).SetConfig(ctx, req.(*appctlpb.ServerConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagementService_Reload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(appctlpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagementServiceServer).Reload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagementService_Reload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagementServiceServer).Reload(ctx, req.(*appctlpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagementService_Exit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(appctlpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagementServiceServer).Exit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagementService_Exit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagementServiceServer).Exit(ctx, req.(*appctlpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagementService_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(appctlpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagementServiceServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagementService_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagementServiceServer).GetMetrics(ctx, req.(*appctlpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagementService_GetSessionInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(appctlpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagementServiceServer).GetSessionInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagementService_GetSessionInfoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagementServiceServer).GetSessionInfoList(ctx, req.(*appctlpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagementService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(appctlpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagementServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagementService_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagementServiceServer).GetUsers(ctx, req.(*appctlpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagementService_GetThreadDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(appctlpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagementServiceServer).GetThreadDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagementService_GetThreadDump_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagementServiceServer).GetThreadDump(ctx, req.(*appctlpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagementService_StartCPUProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(appctlpb.ProfileSavePath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagementServiceServer).StartCPUProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagementService_StartCPUProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagementServiceServer).StartCPUProfile(ctx, req.(*appctlpb.ProfileSavePath))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagementService_StopCPUProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(appctlpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagementServiceServer).StopCPUProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagementService_StopCPUProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagementServiceServer).StopCPUProfile(ctx, req.(*appctlpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagementService_GetHeapProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(appctlpb.ProfileSavePath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagementServiceServer).GetHeapProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagementService_GetHeapProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagementServiceServer).GetHeapProfile(ctx, req.(*appctlpb.ProfileSavePath))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagementService_GetMemoryStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(appctlpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagementServiceServer).GetMemoryStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagementService_GetMemoryStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagementServiceServer).GetMemoryStatistics(ctx, req.(*appctlpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerManagementService_ServiceDesc is the grpc.ServiceDesc for ServerManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appctl.ServerManagementService",
	HandlerType: (*ServerManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _ServerManagementService_GetStatus_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _ServerManagementService_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _ServerManagementService_Stop_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _ServerManagementService_GetConfig_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _ServerManagementService_SetConfig_Handler,
		},
		{
			MethodName: "Reload",
			Handler:    _ServerManagementService_Reload_Handler,
		},
		{
			MethodName: "Exit",
			Handler:    _ServerManagementService_Exit_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _ServerManagementService_GetMetrics_Handler,
		},
		{
			MethodName: "GetSessionInfoList",
			Handler:    _ServerManagementService_GetSessionInfoList_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _ServerManagementService_GetUsers_Handler,
		},
		{
			MethodName: "GetThreadDump",
			Handler:    _ServerManagementService_GetThreadDump_Handler,
		},
		{
			MethodName: "StartCPUProfile",
			Handler:    _ServerManagementService_StartCPUProfile_Handler,
		},
		{
			MethodName: "StopCPUProfile",
			Handler:    _ServerManagementService_StopCPUProfile_Handler,
		},
		{
			MethodName: "GetHeapProfile",
			Handler:    _ServerManagementService_GetHeapProfile_Handler,
		},
		{
			MethodName: "GetMemoryStatistics",
			Handler:    _ServerManagementService_GetMemoryStatistics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "appctl/proto/rpc.proto",
}
